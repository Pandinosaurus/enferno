    {% extends 'layout.html' %}
    {% block css %}
    {% endblock %}
    {% block sidebar %}
    {% endblock %}
    {% block layout_classes %} align-center {% endblock %}

{% block content %}

    <v-card class="ma-2 mt-12 w-100 h-100">
        <v-toolbar>
            <v-toolbar-title>Project Dashboard</v-toolbar-title>
            <v-spacer></v-spacer>
        </v-toolbar>
    <v-card-text>
      <v-text-field
        class="my-2"
        v-model="q"
        label="Search"
        prepend-inner-icon="mdi-magnify"
        variant="outlined"
        hide-details
        single-line
      ></v-text-field>

    </v-card-text>
        <v-card-text>

            <v-data-table-server
                    hover
                    :items-length="itemsLength"
                    :items-per-page="itemsPerPage"
                    :items="items"
                    :headers="headers"
                    @click:row=""
                    @update:options="refresh"
            >

                <template v-slot:top>
                    <v-toolbar color="transparent" class="mb-4" dense elevation="0">
                        <v-btn class="ml-auto" prepend-icon="mdi-plus" @click="createItem" size="small"
                               variant="elevated" color="primary"> Add Project</v-btn>
                    </v-toolbar>
                </template>


                    <template v-slot:item.id="{ item }">
                        <span>${item.id}</span>
                    </template>

                    <template v-slot:item.url="{ item }">
                        <span>${item.url}</span>
                    </template>

                    <template v-slot:item.description="{ item }">
                        <span>${item.description}</span>
                    </template>


                <template v-slot:item.actions="{ item }">
                    <v-icon
                            small
                            class="mr-2"
                            @click="editItem(item)"
                    >
                        mdi-pencil
                    </v-icon>
                    <v-icon
                            small
                            @click="deleteItem(item)"
                    >
                        mdi-delete
                    </v-icon>
                </template>

            </v-data-table-server>
        </v-card-text>
    </v-card>

    <!--Edit Dialog-->
    <v-dialog v-model="edialog" width="660">
        <v-card v-if="edialog" class="pa-6">
            <v-sheet class="d-flex justify-end">
                <v-btn @click="edialog=false" size="small" icon="mdi-close" variant="text"></v-btn>
            </v-sheet>
            <v-card-title>Project Editor</v-card-title>

            <v-card-text>
                <!-- Dynamic fields go here -->

                    <v-text-field variant="underlined" label="Id"
                                  v-model="eitem.id" ></v-text-field>

                    <v-text-field variant="underlined" label="Url"
                                  v-model="eitem.url" ></v-text-field>

                    <v-text-field variant="underlined" label="Description"
                                  v-model="eitem.description" ></v-text-field>

            </v-card-text>

            <v-card-actions>
                <v-spacer></v-spacer>
                <v-btn color="primary" variant="elevated" @click="saveItem">Save</v-btn>
            </v-card-actions>
        </v-card>
    </v-dialog>

    <v-snackbar size="small" class="d-flex" v-model="snackBar" rounded="pill" elevation="25">
        ${snackMessage}
        <template v-slot:actions>
            <v-btn @click="snackBar=false" icon="mdi-close" class="ml-auto" variant="text" size="small"></v-btn>
        </template>
    </v-snackbar>

{% endblock %}
{% block js %}

    <script>
        const {createApp} = Vue;
        const {createVuetify} = Vuetify;

        const vuetify = createVuetify();

        window.app = createApp({
            data() {
                return {
                    menu: null,
                    snackBar: false,
                    snackMessage: "",
                    loading: false,
                    items: [],
                    itemsPerPage: 20,
                    itemsLength: 0,
                    q: "",
                    drawer: true,

                    headers: [

                            {
                                title: 'Id',
                                value: 'id'

                            },

                            {
                                title: 'Url',
                                value: 'url'

                            },

                            {
                                title: 'Description',
                                value: 'description'

                            },

                         {
                            text: 'Actions',
                            align: 'center',
                            sortable: false,
                            value: 'actions'
                        }

                    ],
                    edialog: false,
                    eitem: {},
                };
            },
            mounted() {
                this.refresh();
            },
            delimiters: ["${", "}"],

            methods: {
                showSnack(message) {
                    this.snackMessage = message;
                    this.snackBar = true;
                },

                refresh(options) {
                    if (this.loading) return;
                    this.loading = true;

                    const payload = {
                        q: this.q,
                        options: options
                    };

                    // Example API call to fetch items
                    axios.post(`/api/projects`,payload).then(res => {
                        this.items = res.data.items;
                        this.itemsPerPage = res.data.perPage;
                        this.itemsLength = res.data.total;
                    }).catch(err => {
                        this.showSnack(err.response?.data?.message || 'Error fetching data');
                    }).finally(() => {
                        this.loading = false;
                    })
                },

                createItem() {
                    this.edialog = true;
                    this.eitem = {}; // Reset the item to be a clean object
                },

                editItem(item) {
                    this.eitem = {...item}; // Copy the item to be edited
                    this.edialog = true; // Show the edit dialog
                },

                saveItem() {
                    const apiUrl = this.eitem.id ? `/api/project/${this.eitem.id}` : `/api/project/`;
                    const method = this.eitem.id ? 'put' : 'post';

                    axios(apiUrl, {item: this.eitem}).then(res => {
                        this.showSnack(res.data?.message || `project saved successfully`);
                        this.refresh();
                        this.edialog = false;
                    }).catch(err => {
                        this.showSnack(err.response?.data?.message || 'Error saving data');
                    });
                },


                deleteItem(item) {
                    if (confirm(`Are you sure you want to delete this project?`)) {
                        axios.delete(`/api/project/${item.id}`).then(res => {
                            this.showSnack(res.data?.message || `project deleted successfully`);
                            this.refresh();
                        }).catch(err => {
                            this.showSnack(err.response?.data?.message || 'Error deleting data');
                        });
                    }
                }


            }
        });

        app.use(vuetify).mount("#app");
    </script>


{% endblock %}
