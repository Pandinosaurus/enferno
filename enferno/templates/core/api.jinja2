@portal.route('/projects/')
def projects():
    return render_template('cms/projects.html')

@portal.post('/api/projects')
def api_projects():

    options = request.json.get('options', {})
    page = options.get('page', 1)
    per_page = options.get('itemsPerPage', PER_PAGE)
    q = request.json.get('q', '')

    query = db.session.query(Project)



    pagination = query.paginate(page=page, per_page=per_page, error_out=False)

    items =

    response_data = {
        'items': items,
        'perPage': pagination.per_page,
        'page': pagination.page,
        'total': pagination.total,
        'pages': pagination.pages,
        'has_prev': pagination.has_prev,
        'has_next': pagination.has_next,
        'prev_num': pagination.prev_num,
        'next_num': pagination.next_num
    }

    return Response(json.dumps(response_data), content_type='application/json')

@portal.route('/api/project/', methods=['POST'])
def api_project_create():
    item_data = request.json.get('item', {})
    item = Project()
    item.from_dict(item_data)
    db.session.add(item)
    try:
        db.session.commit()
        return {'message': 'Project successfully created!'}
    except Exception as e:
        db.session.rollback()
        return {'message': 'Error creating project', 'error': str(e)}, 412

@portal.post('/api/project/<int:id>')
def api_project_update(id):
    item = db.get_or_404(Project, id)
    item_data = request.json.get('item', {})
    item.from_dict(item_data)
    db.session.commit()
    return {'message': 'Project successfully updated!'}

@portal.route('/api/project/<int:id>', methods=['DELETE'])
def api_project_delete(id):
    item = db.session.query(Project).get_or_404(id)
    db.session.delete(item)
    db.session.commit()
    return {'message': 'Project successfully deleted!'}
