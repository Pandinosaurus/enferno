---
description: Overview and index of Enferno development rules
globs: 
alwaysApply: true
---
# Enferno Framework Rules for Cursor

This directory contains comprehensive coding standards and architectural patterns for the **Enferno** framework.

## Rule Files Organization

### Core Architecture
- `01-architecture.mdc` — Project structure, Flask app organization, and blueprint patterns
- `02-backend-standards.mdc` — Python, Flask, and API development standards
- `03-frontend-patterns.mdc` — Vue.js, Vuetify, and template integration patterns
- `04-deployment.mdc` — Docker and deployment best practices

## Framework Overview

**Enferno** is a full-stack web framework built with:

- **Backend**: Python Flask with Blueprint organization
- **Frontend**: Vue 3 + Vuetify (no build step, direct JS)
- **Templates**: Jinja2 server-side rendering with Vue integration
- **UI**: Material Design via Vuetify components
- **API**: RESTful architecture with JSON responses
- **Database**: SQLAlchemy 2.x with statement-based patterns

## Key Architectural Principles

1. **Blueprint-based organization** by feature (admin, public, user)
2. **No SPA** - each page mounts its own Vue instance
3. **Custom Vue delimiters** (`${}`) to avoid Jinja conflicts
4. **Direct JavaScript** without build tools
5. **RESTful API design** with consistent responses

These rules ensure consistency, scalability, and maintainability across the codebase.

