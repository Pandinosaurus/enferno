---
description: 
globs: 
alwaysApply: true
---
## Python

- Clean, minimal, PEP 8-compliant code  
- Use meaningful names

## Flask

- Group routes by feature  
- Use **Blueprints**:
  - `public/views.py` — public pages & resources  
  - `portal/views.py` — authenticated user routes (`require_auth` in `before_request`)  
  - `user/views.py` — account/auth routes (login, logout, etc.)  
- Use `extensions.py` to import initialized Flask extensions

## API

- RESTful endpoints  
- Consistent JSON responses  
- Graceful error handling with correct status codes

## Database

- Use SQLAlchemy ORM, sqlalchemy 2.x statement style paradigm 
- Clear models & relationships  
- Use migrations for schema changes

## Security

- AuthN & AuthZ  
- Sanitize inputs  
- CSRF protection

## Errors

- try/except for handling  
- Log errors  
- Friendly error messages