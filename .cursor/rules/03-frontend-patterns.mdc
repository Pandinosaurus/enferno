---
description: Vue.js, Vuetify, and template integration patterns for Enferno
globs: ["**/*.html", "**/*.js", "enferno/templates/**/*", "enferno/static/**/*"]
alwaysApply: true
---
# Frontend Development Patterns

## Core Frontend Architecture

### No Build Step Philosophy
- **Direct JavaScript** files without compilation or bundling
- **Vue 3 + Vuetify** loaded via CDN in base template
- **Component definition** using `Vue.defineComponent` with template strings
- **Global configuration** in `enferno/static/js/config.js`
- **Per-page Vue instances** rather than SPA architecture

### Base Template Structure
Every page extends `layout.html` which provides:
- Vue 3 and Vuetify CDN imports
- Global configuration object
- Material Design Icons
- Base application shell

```html
<!-- layout.html provides the foundation -->
<!DOCTYPE html>
<html>
<head>
    <!-- Vuetify CSS -->
    <link href="/static/css/vuetify.min.css" rel="stylesheet">
    <link href="/static/mdi/css/materialdesignicons.min.css" rel="stylesheet">
</head>
<body>
    <div id="app">
        <!-- Vue app content -->
        {% block content %}{% endblock %}
    </div>
    
    <!-- Vue and Vuetify scripts -->
    <script src="/static/js/vue.min.js"></script>
    <script src="/static/js/vuetify.min.js"></script>
    <script src="/static/js/config.js"></script>
    
    {% block js %}{% endblock %}
</body>
</html>
```

## Vue-Jinja Integration

### CRITICAL: Custom Delimiters
Enferno uses **`${` and `}`** for Vue expressions to avoid conflicts with Jinja's `{{ }}`:

```html
<!-- CORRECT: Vue expressions with custom delimiters -->
<v-card-title>${ user.name }</v-card-title>
<v-list-item v-for="item in items" :key="item.id">
    ${ item.title }
</v-list-item>

<!-- CORRECT: Jinja expressions (server-side) -->
{% if current_user.is_authenticated %}
    <v-btn href="/logout">Logout</v-btn>
{% endif %}

<!-- WRONG: Never use {{ }} for Vue expressions -->
<v-card-title>{{ user.name }}</v-card-title>
```

### Vue App Initialization Pattern
Every page that uses Vue must follow this initialization pattern:

```html
{% extends 'layout.html' %}
{% block content %}
    <v-container>
        <!-- Page content with Vue components -->
    </v-container>
{% endblock %}

{% block js %}
<script>
    const {createApp} = Vue;
    const {createVuetify} = Vuetify;
    const vuetify = createVuetify(config.vuetifyConfig);

    const app = createApp({
        data() {
            return {
                config: config,
                menu: config.menu,
                drawer: true,  // false for public pages
                // page-specific data here
            };
        },
        delimiters: config.delimiters,  // REQUIRED: Uses ${ }
        methods: {
            // page-specific methods
        }
    });

    app.use(vuetify).mount('#app');
</script>
{% endblock %}
```

### Passing Server Data to Vue
Use JSON script tags to safely pass data from Jinja to Vue:

```html
<!-- In template -->
<script type="application/json" id="server-data">
    {{ server_data|tojson|safe }}
</script>

<script>
    // In Vue app initialization
    const serverData = JSON.parse(
        document.getElementById('server-data').textContent
    );
    
    const app = createApp({
        data() {
            return {
                items: serverData.items || [],
                config: config
            };
        }
    });
</script>
```

## Component Patterns

### Data Table Pattern
Standard pattern for displaying tabular data with Vuetify:

```javascript
const app = createApp({
    data() {
        return {
            items: [],
            itemsLength: 0,
            loading: false,
            search: '',
            options: {
                page: 1,
                itemsPerPage: config.itemsPerPage || 25,
                sortBy: [],
                sortDesc: []
            },
            headers: [
                { title: 'ID', value: 'id', sortable: true },
                { title: 'Name', value: 'name', sortable: true },
                { title: 'Email', value: 'email', sortable: false },
                { title: 'Actions', value: 'actions', sortable: false }
            ]
        }
    },
    methods: {
        refresh(options) {
            if (options) {
                this.options = {...this.options, ...options};
            }
            this.loadItems();
        },
        
        loadItems() {
            this.loading = true;
            const params = new URLSearchParams({
                page: this.options.page,
                per_page: this.options.itemsPerPage,
                search: this.search
            });
            
            axios.get(`/api/users?${params}`)
                .then(res => {
                    this.items = res.data.items;
                    this.itemsLength = res.data.total;
                })
                .catch(error => {
                    console.error('Error loading data:', error);
                    this.showSnack('Failed to load data');
                })
                .finally(() => {
                    this.loading = false;
                });
        }
    },
    mounted() {
        this.loadItems();
    }
});
```

### Edit Dialog Pattern
Standard pattern for create/edit forms:

```javascript
data() {
    return {
        edialog: false,
        eitem: {
            id: null,
            name: '',
            email: '',
            active: true
        },
        defaultItem: {
            id: null,
            name: '',
            email: '',
            active: true
        }
    }
},
methods: {
    editItem(item) {
        this.eitem = Object.assign({}, item);
        this.edialog = true;
    },
    
    newItem() {
        this.eitem = Object.assign({}, this.defaultItem);
        this.edialog = true;
    },
    
    saveItem() {
        const endpoint = this.eitem.id ? 
            `/api/users/${this.eitem.id}` : 
            '/api/users';
            
        axios.post(endpoint, {item: this.eitem})
            .then(res => {
                this.showSnack(res.data.message || 'Saved successfully');
                this.edialog = false;
                this.refresh();
            })
            .catch(err => {
                this.showSnack(err.response?.data?.error || 'Save failed');
            });
    },
    
    closeDialog() {
        this.edialog = false;
        this.eitem = Object.assign({}, this.defaultItem);
    }
}
```

## UI Component Standards

### Button Patterns
```html
<!-- Primary action -->
<v-btn color="primary" variant="elevated" prepend-icon="mdi-plus" @click="newItem">
    Add New
</v-btn>

<!-- Secondary action -->
<v-btn variant="text" @click="closeDialog">
    Cancel
</v-btn>

<!-- Icon button -->
<v-btn icon="mdi-pencil" size="small" @click="editItem(item)"></v-btn>

<!-- Danger action -->
<v-btn color="error" variant="outlined" prepend-icon="mdi-delete">
    Delete
</v-btn>
```

### Card Layout
```html
<v-card class="ma-2">
    <v-card-title class="d-flex justify-space-between align-center">
        <span>Card Title</span>
        <v-btn icon="mdi-refresh" @click="refresh"></v-btn>
    </v-card-title>
    
    <v-card-text>
        <!-- Main content -->
    </v-card-text>
    
    <v-card-actions>
        <v-spacer></v-spacer>
        <v-btn variant="text">Cancel</v-btn>
        <v-btn color="primary">Save</v-btn>
    </v-card-actions>
</v-card>
```

### Data Table Template
```html
<v-data-table
    :items="items"
    :headers="headers"
    :loading="loading"
    :items-length="itemsLength"
    :search="search"
    v-model:options="options"
    @update:options="refresh"
    class="elevation-1">
    
    <template v-slot:top>
        <v-toolbar flat>
            <v-toolbar-title>Users</v-toolbar-title>
            <v-spacer></v-spacer>
            <v-text-field
                v-model="search"
                append-icon="mdi-magnify"
                label="Search"
                single-line
                hide-details>
            </v-text-field>
        </v-toolbar>
    </template>
    
    <template v-slot:item.actions="{ item }">
        <v-btn icon="mdi-pencil" size="small" @click="editItem(item)"></v-btn>
        <v-btn icon="mdi-delete" size="small" color="error" @click="deleteItem(item)"></v-btn>
    </template>
</v-data-table>
```

## API Integration

### Standard AJAX Patterns
```javascript
methods: {
    // GET with error handling
    async fetchData() {
        try {
            const response = await axios.get('/api/endpoint');
            this.items = response.data.items;
        } catch (error) {
            console.error('Fetch error:', error);
            this.showSnack('Failed to load data');
        }
    },
    
    // POST with form data
    async saveData() {
        try {
            const response = await axios.post('/api/endpoint', {
                item: this.formData
            });
            this.showSnack(response.data.message);
            this.refresh();
        } catch (error) {
            this.showSnack(error.response?.data?.error || 'Save failed');
        }
    },
    
    // DELETE with confirmation
    async deleteItem(item) {
        if (confirm(`Delete ${item.name}?`)) {
            try {
                await axios.delete(`/api/items/${item.id}`);
                this.showSnack('Item deleted');
                this.refresh();
            } catch (error) {
                this.showSnack('Delete failed');
            }
        }
    }
}
```

## User Feedback Patterns

### Snackbar Notifications
```javascript
data() {
    return {
        snackBar: false,
        snackMessage: '',
        snackColor: 'success'
    }
},
methods: {
    showSnack(message, color = 'success') {
        this.snackMessage = message;
        this.snackColor = color;
        this.snackBar = true;
    }
}
```

```html
<v-snackbar v-model="snackBar" :color="snackColor" timeout="3000">
    ${ snackMessage }
    <template v-slot:actions>
        <v-btn variant="text" @click="snackBar = false">Close</v-btn>
    </template>
</v-snackbar>
```

## Styling Guidelines

### Vuetify Utility Classes
```html
<!-- Spacing -->
<div class="ma-2 pa-4">  <!-- margin: 2, padding: 4 -->
<div class="mt-6 mb-2">  <!-- margin-top: 6, margin-bottom: 2 -->

<!-- Layout -->
<div class="d-flex justify-space-between align-center">
<div class="text-center">

<!-- Responsive -->
<v-col cols="12" sm="6" md="4">
```

### Material Design Colors
- Use semantic color names: `primary`, `secondary`, `error`, `warning`, `info`, `success`
- Avoid hard-coded color values
- Leverage Vuetify's color system

## Authentication Integration

### Template-Level Auth Checks
```html
<!-- Jinja auth checks (server-side) -->
{% if current_user.is_authenticated %}
    <v-btn href="/dashboard">Dashboard</v-btn>
{% else %}
    <v-btn href="/login">Login</v-btn>
{% endif %}

{% if current_user.has_role('admin') %}
    <v-btn href="/admin">Admin Panel</v-btn>
{% endif %}
```

### Vue-Level Auth State
```javascript
data() {
    return {
        user: {
            authenticated: {{ current_user.is_authenticated|tojson }},
            roles: {{ current_user.roles|map(attribute='name')|list|tojson }}
        }
    }
},
methods: {
    hasRole(role) {
        return this.user.roles.includes(role);
    }
}
```

These patterns ensure:
- **Consistent UI/UX** across all pages
- **Proper Vue-Jinja integration** without conflicts
- **Reusable component patterns** for common functionality
- **Responsive design** following Material Design principles