---
description: 
globs: 
alwaysApply: true
---
# Enferno UI and Template Patterns

## Core Architecture

- Use Vue 3 with Vuetify for all UI components
- **Not** a traditional SPA - each page mounts its own Vue instance
- Shared configuration through `/static/js/config.js`
- Base dependencies loaded in `layout.html`

## Template Structure
```html
{% extends 'layout.html' %}
{% block content %}
    <v-card class="ma-2">
        <!-- Main content here -->
    </v-card>
{% endblock %}

{% block js %}
    <script>
        const {createApp} = Vue;
        const {createVuetify} = Vuetify;
        const vuetify = createVuetify(config.vuetifyConfig);

        const app = createApp({
            data() {
                return {
                    config: config,
                    menu: config.menu,
                    drawer: true,  // false for public pages
                    // component specific data
                };
            },
            delimiters: config.delimiters
        });

        app.use(vuetify).mount('#app');
    </script>
{% endblock %}
```

## Vue-Jinja Integration

### IMPORTANT: Custom Delimiters
- Enferno uses `${` and `}` for Vue expressions to avoid Jinja conflicts
- Always use `delimiters: config.delimiters` in Vue app initialization
- **NEVER** use standard Vue double curly braces (`{{ }}`) in templates

### Correct Usage Examples
```html
<!-- CORRECT: Using ${} for Vue expressions -->
<v-card-title>${ item.title }</v-card-title>

<!-- CORRECT: Using Jinja expressions -->
{% if current_user.is_authenticated %}
    <v-btn href="/logout">Logout</v-btn>
{% endif %}

<!-- CORRECT: v-for with proper delimiters -->
<v-col v-for="(item, index) in items" :key="index">
    <div>${ item.name }</div>
</v-col>
```

### Incorrect Usage Examples
```html
<!-- WRONG: Using Vue double curly braces -->
<v-card-title>{{ item.title }}</v-card-title>

<!-- WRONG: Mixing Vue expressions in Jinja blocks -->
{% if item.active == true %}
    ${ item.name }
{% endif %}
```

### Passing Server Data to Vue
- Use JSON script tags to pass data from server to client:
```html
<script type="application/json" id="data-id">
    {{ server_data|tojson|safe }}
</script>

<script>
    // In Vue app
    const serverData = JSON.parse(document.getElementById('data-id').textContent);
</script>
```

## Component Patterns

### Data Table Pattern
```javascript
{
    data() {
        return {
            items: [],
            itemsLength: 0,
            options: {
                page: 1,
                itemsPerPage: config.itemsPerPage || 25
            },
            headers: [
                { title: 'ID', value: 'id' },
                { title: 'Name', value: 'name' },
                { title: 'Actions', value: 'actions', sortable: false }
            ]
        }
    }
}
```

### Dialog Pattern
```javascript
{
    data() {
        return {
            edialog: false,
            eitem: {
                id: "",
                name: "",
                // other form fields
            }
        }
    }
}
```

## UI Components

### Buttons
- Primary actions: `color="primary" variant="elevated"`
- Secondary actions: `variant="text"`
- Icons: Use `mdi-` prefix
```html
<v-btn color="primary" variant="elevated" prepend-icon="mdi-plus">
    Add Item
</v-btn>
```

### Cards
```html
<v-card class="ma-2">
    <v-card-title>Title</v-card-title>
    <v-card-text>Content</v-card-text>
    <v-card-actions>
        <v-spacer></v-spacer>
        <v-btn>Action</v-btn>
    </v-card-actions>
</v-card>
```

## Data Management

### API Calls
- Use axios with Promise chains
- Standard error handling
- Refresh after operations
```javascript
methods: {
    refresh(options) {
        if (options) {
            this.options = {...this.options, ...options};
        }
        
        axios.get(`/api/resource?page=${this.options.page}`)
            .then(res => {
                this.items = res.data.items;
                this.itemsLength = res.data.total;
            })
            .catch(error => {
                console.error('Error:', error);
                this.showSnack('Failed to load data');
            });
    }
}
```

### CRUD Operations
```javascript
methods: {
    saveItem() {
        const endpoint = this.eitem.id ? 
            `/api/resource/${this.eitem.id}` : 
            '/api/resource/';
            
        axios.post(endpoint, {item: this.eitem})
            .then(res => {
                this.showSnack(res.data?.message);
                this.refresh();
            })
            .catch(err => {
                this.showSnack(err.response?.data);
            });
        this.edialog = false;
    }
}
```

## User Feedback
- Use snackbar for API operation feedback
- Use v-alert for flash messages
```javascript
methods: {
    showSnack(message) {
        this.snackMessage = message;
        this.snackBar = true;
    }
}
```

## Styling
- Use Vuetify spacing utilities:
  - `ma-*` for margin
  - `pa-*` for padding
  - `d-flex` for flex layout
- Use Material Design color system
- Prefer Vuetify utility classes over custom CSS

## Authentication
- Check `current_user.is_authenticated`
- Use `current_user.has_role('role')`
- Standard auth endpoints:
  - `/login`
  - `/logout`
  - `/register`

## Updating Templates

### Template Creation Process
1. Create a new file in `enferno/templates/` or appropriate subdirectory
2. Extend the base layout: `{% extends 'layout.html' %}`
3. Define content blocks: `{% block content %}...{% endblock %}`
4. Add JavaScript in the js block: `{% block js %}...{% endblock %}`
5. Ensure Vue app is properly initialized with `delimiters: config.delimiters`

### Template Modification Process
1. Identify existing patterns in the template
2. Maintain consistent Vuetify component usage
3. Keep Jinja and Vue logic separate when possible
4. Preserve existing data structure in the Vue instance
5. Always use `${` and `}` for Vue expressions, never `{{ }}`
6. Test template changes with various user states (logged in/out)

### Common Template Sections
- Header/navigation (controlled by `drawer` and `menu`)
- Main content area (typically in a `<v-container>`)
- Data tables (with headers, items, and pagination)
- Edit dialogs (with form fields bound to `eitem`)
- Snackbar notifications (triggered by `showSnack()`)